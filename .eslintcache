[{"/mnt/7a8f1066-db4b-43be-81a2-6f42a0669b6b/Documents/Programming/weather/src/index.js":"1","/mnt/7a8f1066-db4b-43be-81a2-6f42a0669b6b/Documents/Programming/weather/src/searchbar/searchBar.js":"2","/mnt/7a8f1066-db4b-43be-81a2-6f42a0669b6b/Documents/Programming/weather/src/title/title.js":"3"},{"size":456,"mtime":1608580258515,"results":"4","hashOfConfig":"5"},{"size":267,"mtime":1608580258515,"results":"6","hashOfConfig":"5"},{"size":3055,"mtime":1609137388522,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},"lesidv",{"filePath":"11","messages":"12","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"13"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"16","usedDeprecatedRules":"10"},"/mnt/7a8f1066-db4b-43be-81a2-6f42a0669b6b/Documents/Programming/weather/src/index.js",[],["17","18"],"/mnt/7a8f1066-db4b-43be-81a2-6f42a0669b6b/Documents/Programming/weather/src/searchbar/searchBar.js",[],["19","20"],"/mnt/7a8f1066-db4b-43be-81a2-6f42a0669b6b/Documents/Programming/weather/src/title/title.js",["21"],"import React, { useState }from 'react';\nimport '../index.css';\nimport './title-style.css';\n\nconst CITY = 'Montevideo,UY';\nconst APIKEY = '0823e272568368a3ed22b2cd2a830e01';\nconst UNITS = 'metric';\n\nconsole.clear();\n\n// const req = new XMLHttpRequest();\n// const url = `https://api.openweathermap.org/data/2.5/weather?q=${CITY}&appid=${APIKEY}&units=${UNITS}`\n// req.open(\"GET\", url), true;\n\n// req.onreadystatechange=(e)=>{\n//     console.log(req.responseText)\n// }\n\n// req.send();\n\n// var getJSON = function(url, callback) {\n//     var xhr = new XMLHttpRequest();\n//     xhr.open('GET', url, true);\n//     xhr.responseType = 'json';\n//     xhr.onload = function() {\n//       var status = xhr.status;\n//       if (status === 200) {\n//         callback(null, xhr.response);\n//       } else {\n//         callback(status, xhr.response);\n//       }\n//     };\n//     xhr.send();\n// };\n\n// var req = new XMLHttpRequest();\n// req.open('GET', `https://api.openweathermap.org/data/2.5/weather?q=${CITY}&appid=${APIKEY}&units=${UNITS}`, true);\n// req.onreadystatechange = function (aEvt) {\n//   if (req.readyState === 4) {\n//      if(req.status === 200)\n//       console.log(req.responseText);\n//      else\n//       console.log(\"Error loading page\\n\");\n//   }\n// };\n// req.send(null); \n\n// let resulta = getJSON(`https://api.openweathermap.org/data/2.5/weather?q=${CITY}&appid=${APIKEY}&units=${UNITS}`,\n// function(err, data) {\n//   if (err !== null) {\n//     alert('Something went wrong: ' + err);\n//   } else {\n//     console.log('Data ' + JSON.stringify(data));\n//     return JSON.stringify(data);\n//   }\n// });\n\n// function getJSONData(){\n//     fetch(`https://api.openweathermap.org/data/2.5/weather?q=${CITY}&appid=${APIKEY}&units=${UNITS}`)\n//         .then(response => response.json())\n//         .then(data => {return(data.name)});\n//     }\n\n// class Title extends React.Component {\n//     render() {\n//         return(\n//             <h1 className=\"title\">Current weather for {getJSONData()} is</h1>\n//         );\n//     }\n// };\n\n// export default Title;\n\n\n// function getJSONData(){\n//     fetch(`https://api.openweathermap.org/data/2.5/weather?q=${CITY}&appid=${APIKEY}&units=${UNITS}`)\n//         .then(response => response.json())\n//         .then(data => {return(data.name)});\n//     }\n\n// class Title extends React.Component {\n//     state = {data: {}}\n//     componentDidMount(){\n//       getJSONData();\n//     }\n//     render() {\n//         return(\n//             <h1 className=\"title\">Current weather for {JSON.stringify(this.state.data)} is</h1>\n//         );\n//     }\n// };\n\nexport default class Title extends React.Component {\n    state = {}\n  \n    componentDidMount() {\n      return fetch(`https://api.openweathermap.org/data/2.5/weather?q=${CITY}&appid=${APIKEY}&units=${UNITS}`)\n        .then((response) => response.json())\n        .then((data) => this.setState({ data }));\n    }\n  \n    render() {\n      const { data } = this.state\n      return data ? <h1 className=\"title\">Current weather for {data.name} is</h1> : \"Loading...\";\n    }\n  }",{"ruleId":"22","replacedBy":"23"},{"ruleId":"24","replacedBy":"25"},{"ruleId":"22","replacedBy":"26"},{"ruleId":"24","replacedBy":"27"},{"ruleId":"28","severity":1,"message":"29","line":1,"column":17,"nodeType":"30","messageId":"31","endLine":1,"endColumn":25},"no-native-reassign",["32"],"no-negated-in-lhs",["33"],["32"],["33"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]